---
key: intro
title: Introduction
description: Introduces the basics of the Quickstart Ansible tutorial and the ansible command.
steps:
  - task: |
      Welcome!

      This will give you a quick intro to how this command program works as well as introduce the basics of Ansible.

      In order to advance to the next step in the tutorial use type the 't' or 'tutorial' command.

  - task: |
      The 'tutorial' command advances you to the next step. If you need to see the text for the current step you are on you can use the 'tutorial repeat' command.

      To see the list of available lessons use 'tutorial lessons'.

      You can switch to another lesson using 'tutorial set-lesson LESSON_NAME'.

  - task: |
      The first thing you need to do is ensure that ansible is working correctly. Try running the command:

      'ansible all -m ping'

  - task: |
      You should see the following message:

      192.168.27.4 | SUCCESS => {
          "changed": false,
          "ping": "pong"
      }
      192.168.27.5 | SUCCESS => {
          "changed": false,
          "ping": "pong"
      }
      192.168.27.3 | SUCCESS => {
          "changed": false,
          "ping": "pong"
      }

      This shows that ansible can ping each of the three servers that we have pre-configured for you. If any of these pings fail, there might be a problem with the inventory of hosts.

  - task: |
      There are two main components in 'ansible all -m ping'. The first, 'all', tells ansible that it needs to run against all of the hosts that are configured on the system. We'll get to the host configuration in a moment. The second piece, '-m ping', tells ansible to run the ping module.

  - task: |
      Ansible has hundreds of different modules for managing various components on a system. Lets try a more complex one:

      ansible all -m yum -a "name=epel-release state=present" -b

  - task: |
      That command attempts to install the epel repository on our three servers. Since epel is already there, Ansible tells us that is it already installed and that nothing on the system has changed. Note, the -b flag tells ansible to become root on the target host.

      Ansible strives to be idempotant which means that if you run the same thing twice (such as install epel), ansible will only actually run the command if something needs to be changed on the system.

      Now try:

      ansible all -m yum -a "name=sl state=present" -b

      (note, that might take a minute)

  - task: |
      That command installs sl on each system.

      Note that this time each server reported that a change happened. Since sl was not previously installed on each of these servers, ansible installed it. If you run that command again, it should tell you that nothing has changed.

      To verify that sl was installed, login to one of the servers using 'ssh app-admin@192.168.27.3' and run the 'sl' command.

      You can learn more about the yum module and all of the other Ansible modules here: http://docs.ansible.com/ansible/modules_by_category.html

  - task: |
      Enough about modules for now. Lets take a look at where the hosts are configured.

      cd to the '/etc/ansible' directory.

  - task: |
      We have set this directory up so that it also availble on your local machine. If you look in the base directory for learn-ansible, you will see a folder named etc/. Any changes you make in etc/ will be available in the ansible-control docker container and vice versa. This allows you to edit the files contained in /etc/ansible using vim or nano in the ansible-control container or using whichever editor you have installed on your local machine. Any changes made here will be preserved after the docker containers are destroyed.

  - task: |
      Take a look at the 'hosts' file in '/etc/ansible'. This is where the connection information to our simulated servers is stored. This is our inventory of servers. Here we can set any variables that we need about specific hosts as well as group them into arbitrary groups.

  - task: |
      Lets take a look at the first two lines. Here we are setting an alias of centos1 to the server at 192.168.27.3. We've configured the default login user to be app-admin.

      Since the SSH key for all of our servers is already for the root user under /root/.ssh, we don't need to specify SSH credentials in the inventory.

      # centos server 1
      centos1 ansible_host=192.168.27.3 ansible_user=app-admin

  - task: |
      Try running 'ansible group2 -m ping'. This time you'll notice that it only pings the servers that are in group2. You can specify any group or individual host using the 'ansible' command.

  - task: |
      Take some time to go over the inventory documentation at http://docs.ansible.com/ansible/intro_inventory.html. There you can learn how to specify variables for groups, as well as break the inventory file up into separate YAML files. If you look closesly you'll notice that the ansible_user is the same for all three hosts. See if you can create a group variable for the container group to specify these variables for all of them at once.

      The real power of Ansible comes in the form of playbooks. Once you've famiarized yourself with group variables and inventory files, check out the playbooks lesson using:

      tutorial set-lesson playbooks

  - task: |
      blah blah
    validate:
      name: playbook.PlaybookValidator
      args:
        whatever: you
        want: to
        pass: to
        the: validator
